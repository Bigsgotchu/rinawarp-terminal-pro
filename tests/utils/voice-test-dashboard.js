// tests/utils/voice-test-dashboard.js

const fs = require('fs');
const path = require('path');

class VoiceTestDashboard {
  constructor() {
    this.logs = [];
    this.testStartTime = new Date();
    this.statistics = {
      fallbacks: 0,
      moodChanges: 0,
      audioSources: {}
    };
  }

  logFallback(type, reason) {
    this.logs.push({ event: 'fallback', type, reason, timestamp: new Date().toISOString() });
    this.statistics.fallbacks++;
    console.log(`🛟 Fallback triggered: ${type} → ${reason}`);
  }

  logMoodChange(mood) {
    this.logs.push({ event: 'mood', mood, timestamp: new Date().toISOString() });
    this.statistics.moodChanges++;
    console.log(`🎭 Mood adjusted: ${mood}`);
  }

  logAudioSource(sourceType) {
    this.logs.push({ event: 'audio', source: sourceType, timestamp: new Date().toISOString() });
    this.statistics.audioSources[sourceType] = (this.statistics.audioSources[sourceType] || 0) + 1;
    console.log(`🔊 Audio source used: ${sourceType}`);
  }

  summary() {
    const duration = Math.round((new Date() - this.testStartTime) / 1000);
    console.log('\n🧜‍♀️ Voice Test Dashboard Summary');
    console.log(`⏱️  Test Duration: ${duration}s`);
    console.log(`🛟 Total Fallbacks: ${this.statistics.fallbacks}`);
    console.log(`🎭 Mood Changes: ${this.statistics.moodChanges}`);
    console.log('🔊 Audio Sources:', this.statistics.audioSources);
    console.table(this.logs);
  }

  exportMarkdown() {
    const duration = Math.round((new Date() - this.testStartTime) / 1000);
    const lines = [
      '## 🧜‍♀️ Voice Test Report',
      '',
      '### 📊 Test Summary',
      `- **Test Duration**: ${duration}s`,
      `- **Total Events**: ${this.logs.length}`,
      `- **Fallbacks**: ${this.statistics.fallbacks}`,
      `- **Mood Changes**: ${this.statistics.moodChanges}`,
      `- **Audio Sources**: ${Object.keys(this.statistics.audioSources).join(', ')}`,
      '',
      '### 📋 Detailed Log',
      '| Event | Detail | Timestamp |',
      '|-------|--------|-----------|'
    ];
    
    for (const log of this.logs) {
      const detail = log.type || log.mood || log.source || log.reason || '—';
      lines.push(`| ${log.event} | ${detail} | ${log.timestamp} |`);
    }
    
    lines.push('', '_Generated by RinaWarp Voice Test Dashboard 🧜‍♀️_');
    
    const artifactsDir = path.join(__dirname, '../artifacts');
    if (!fs.existsSync(artifactsDir)) {
      fs.mkdirSync(artifactsDir, { recursive: true });
    }
    fs.writeFileSync(path.join(artifactsDir, 'voice-report.md'), lines.join('\n'));
  }

  exportJSON() {
    const duration = Math.round((new Date() - this.testStartTime) / 1000);
    const report = {
      generatedAt: new Date().toISOString(),
      testStartTime: this.testStartTime.toISOString(),
      durationSeconds: duration,
      statistics: this.statistics,
      totalEvents: this.logs.length,
      logs: this.logs
    };
    
    const artifactsDir = path.join(__dirname, '../artifacts');
    if (!fs.existsSync(artifactsDir)) {
      fs.mkdirSync(artifactsDir, { recursive: true });
    }
    fs.writeFileSync(
      path.join(artifactsDir, 'voice-report.json'),
      JSON.stringify(report, null, 2)
    );
  }

  // Generate a voice confidence score based on test results
  getConfidenceScore() {
    const totalTests = this.logs.length;
    if (totalTests === 0) return 100;
    
    const fallbackRatio = this.statistics.fallbacks / totalTests;
    const baseScore = 100 - (fallbackRatio * 30); // Fallbacks reduce confidence
    return Math.max(0, Math.round(baseScore));
  }

  // Generate Rina's commentary on the test results
  getRinaCommentary() {
    const score = this.getConfidenceScore();
    const fallbacks = this.statistics.fallbacks;
    
    if (score >= 90) {
      return "🧜‍♀️ Voice system is swimming smoothly! All systems operational.";
    } else if (score >= 70) {
      return `🧜‍♀️ Voice system is stable with ${fallbacks} fallback${fallbacks !== 1 ? 's' : ''}. Still making waves!`;
    } else if (score >= 50) {
      return `🧜‍♀️ Voice system had some rough waters with ${fallbacks} fallbacks, but we're staying afloat.`;
    } else {
      return `🧜‍♀️ Voice system needs attention! ${fallbacks} fallbacks detected. Time to debug the depths.`;
    }
  }
}

module.exports = new VoiceTestDashboard();
