/*
 * üßú‚Äç‚ôÄÔ∏è RinaWarp Terminal - CLI AI Handler
 * Handles AI queries from the CLI rina ask command
 */

import { LLMAPIClient } from '../ai-system/llm-api-client.js';
import logger from '../utilities/logger.js';

class CLIAIHandler {
  constructor() {
    this.llmClient = null;
    this.initialized = false;
  }

  async initialize() {
    if (this.initialized) return true;

    try {
      // Initialize LLM client with auto-detection
      this.llmClient = new LLMAPIClient({
        provider: 'auto',
        temperature: 0.7,
        maxTokens: 1024,
      });

      const success = await this.llmClient.initialize();
      if (success) {
        this.initialized = true;
        logger.debug('‚úÖ CLI AI Handler initialized');
        return true;
      } else {
        logger.warn('‚ö†Ô∏è AI providers not available, falling back to mock responses');
        return false;
      }
    } catch (error) {
      logger.error('‚ùå Failed to initialize CLI AI Handler:', error);
      return false;
    }
  }

  async processQuery(query) {
    if (!query || typeof query !== 'string' || query.trim() === '') {
      return {
        success: false,
        error: 'Please provide a valid question',
      };
    }

    try {
      await this.initialize();

      if (this.initialized && this.llmClient) {
        // Use real AI
        const response = await this.llmClient.generateResponse(query, {
          maxTokens: 512,
          temperature: 0.7,
        });

        return {
          success: true,
          response: this.formatResponse(response),
          provider: this.llmClient.config.provider,
        };
      } else {
        // Fallback to enhanced mock responses
        return {
          success: true,
          response: this.generateEnhancedMockResponse(query),
          provider: 'mock',
        };
      }
    } catch (error) {
      logger.error('AI query failed:', error);

      // Graceful fallback to mock
      return {
        success: true,
        response: this.generateEnhancedMockResponse(query),
        provider: 'mock',
        fallback: true,
      };
    }
  }

  formatResponse(response) {
    if (!response) return "I'm not sure how to help with that.";

    // Clean up the response
    let cleaned = response.trim();

    // Add mermaid personality if not present
    if (!cleaned.includes('üßú‚Äç‚ôÄÔ∏è') && Math.random() < 0.3) {
      cleaned = `üßú‚Äç‚ôÄÔ∏è ${cleaned}`;
    }

    return cleaned;
  }

  generateEnhancedMockResponse(query) {
    const lowerQuery = query.toLowerCase();

    // File operations
    if (lowerQuery.includes('file') || lowerQuery.includes('list') || lowerQuery.includes('ls')) {
      return `üßú‚Äç‚ôÄÔ∏è Here are the best commands for file operations:

üìÅ **List Files:**
‚Ä¢ \`ls -la\` - List all files with details
‚Ä¢ \`find . -name "*.txt"\` - Find files by pattern
‚Ä¢ \`du -sh *\` - Show file sizes
‚Ä¢ \`tree\` - Show directory structure

üí° **Pro tip:** Use \`ls -lah\` for human-readable file sizes!`;
    }

    // Git operations
    if (lowerQuery.includes('git')) {
      return `üßú‚Äç‚ôÄÔ∏è Git commands I can help you with:

üêô **Essential Git:**
‚Ä¢ \`git status\` - Check repository status
‚Ä¢ \`git log --oneline\` - View commit history
‚Ä¢ \`git diff\` - See changes
‚Ä¢ \`git add .\` - Stage all changes
‚Ä¢ \`git commit -m "message"\` - Commit with message
‚Ä¢ \`git push\` - Push to remote

üåä **Git flows like ocean currents - master the flow, master the code!**`;
    }

    // Process management
    if (
      lowerQuery.includes('process') ||
      lowerQuery.includes('kill') ||
      lowerQuery.includes('ps')
    ) {
      return `üßú‚Äç‚ôÄÔ∏è Process management commands:

‚ö° **Monitor Processes:**
‚Ä¢ \`ps aux\` - List all processes
‚Ä¢ \`htop\` - Interactive process viewer
‚Ä¢ \`top\` - Real-time process monitor
‚Ä¢ \`pgrep -f "pattern"\` - Find processes by name

üíÄ **Terminate Processes:**
‚Ä¢ \`kill PID\` - Gracefully stop process
‚Ä¢ \`kill -9 PID\` - Force kill process
‚Ä¢ \`killall processname\` - Kill by name

üîç **Find Process ID:** \`ps aux | grep processname\``;
    }

    // Docker
    if (lowerQuery.includes('docker')) {
      return `üßú‚Äç‚ôÄÔ∏è Docker commands (containers are like magical underwater bubbles!):

üê≥ **Basic Docker:**
‚Ä¢ \`docker ps\` - List running containers
‚Ä¢ \`docker images\` - List available images
‚Ä¢ \`docker run -it image bash\` - Run interactive container
‚Ä¢ \`docker build -t name .\` - Build image
‚Ä¢ \`docker logs container_id\` - View container logs

üßπ **Cleanup:**
‚Ä¢ \`docker system prune\` - Clean up unused resources
‚Ä¢ \`docker container prune\` - Remove stopped containers`;
    }

    // System monitoring
    if (
      lowerQuery.includes('system') ||
      lowerQuery.includes('monitor') ||
      lowerQuery.includes('memory') ||
      lowerQuery.includes('cpu')
    ) {
      return `üßú‚Äç‚ôÄÔ∏è System monitoring like checking the ocean's vital signs:

üìä **System Resources:**
‚Ä¢ \`htop\` - Interactive system monitor
‚Ä¢ \`free -h\` - Memory usage
‚Ä¢ \`df -h\` - Disk space
‚Ä¢ \`du -sh *\` - Directory sizes
‚Ä¢ \`uptime\` - System uptime and load

üî• **Performance Analysis:**
‚Ä¢ \`iotop\` - Disk I/O monitor
‚Ä¢ \`nethogs\` - Network usage by process
‚Ä¢ \`vmstat 1\` - Virtual memory statistics`;
    }

    // Network operations
    if (
      lowerQuery.includes('network') ||
      lowerQuery.includes('ping') ||
      lowerQuery.includes('curl') ||
      lowerQuery.includes('wget')
    ) {
      return `üßú‚Äç‚ôÄÔ∏è Network commands (like sending messages across the digital ocean):

üåê **Network Testing:**
‚Ä¢ \`ping google.com\` - Test connectivity
‚Ä¢ \`traceroute google.com\` - Trace network path
‚Ä¢ \`netstat -tulpn\` - Show listening ports
‚Ä¢ \`ss -tulpn\` - Modern netstat alternative

üì• **Download Files:**
‚Ä¢ \`curl -O url\` - Download file
‚Ä¢ \`wget url\` - Download file
‚Ä¢ \`curl -s url | jq\` - Download and parse JSON`;
    }

    // Programming help
    if (
      lowerQuery.includes('code') ||
      lowerQuery.includes('program') ||
      lowerQuery.includes('debug')
    ) {
      return `üßú‚Äç‚ôÄÔ∏è Programming assistance (let's make some magic happen):

üíª **Development Tools:**
‚Ä¢ \`grep -r "pattern" .\` - Search code
‚Ä¢ \`find . -name "*.js" -exec grep -l "pattern" {} \\;\` - Find files containing pattern
‚Ä¢ \`wc -l *.js\` - Count lines of code
‚Ä¢ \`diff file1 file2\` - Compare files

üêõ **Debugging:**
‚Ä¢ Check error logs in \`/var/log/\`
‚Ä¢ Use \`strace\` to trace system calls
‚Ä¢ Try \`lsof\` to see open files
‚Ä¢ Monitor with \`tail -f logfile\``;
    }

    // Error help
    if (
      lowerQuery.includes('error') ||
      lowerQuery.includes('fix') ||
      lowerQuery.includes('problem')
    ) {
      return `üßú‚Äç‚ôÄÔ∏è Don't worry, every developer faces errors! Here's how to tackle them:

üîç **Debugging Steps:**
1. Read the error message carefully
2. Check recent changes you made
3. Look at log files
4. Search for the error online
5. Ask for help with specific details

üõü **Common Solutions:**
‚Ä¢ Restart the service/application
‚Ä¢ Check file permissions
‚Ä¢ Verify dependencies are installed
‚Ä¢ Clear cache/temporary files
‚Ä¢ Check available disk space`;
    }

    // Default helpful response
    return `üßú‚Äç‚ôÄÔ∏è I'm here to help! While my AI brain is still learning, I can assist with:

üåü **What I can help with:**
‚Ä¢ Terminal commands and shell operations
‚Ä¢ File and directory management
‚Ä¢ Git and version control
‚Ä¢ Docker and containerization
‚Ä¢ System monitoring and processes
‚Ä¢ Network operations and debugging
‚Ä¢ Programming and development tasks

üí° **Try asking me about:**
‚Ä¢ "How do I find large files?"
‚Ä¢ "Git commands for beginners"
‚Ä¢ "Docker container management"
‚Ä¢ "System performance monitoring"

üßú‚Äç‚ôÄÔ∏è *The more specific your question, the better I can help you!*`;
  }

  // Get status of AI handler
  getStatus() {
    return {
      initialized: this.initialized,
      provider: this.llmClient?.config?.provider || 'none',
      available: Boolean(this.llmClient),
    };
  }
}

// Export singleton instance
const cliAIHandler = new CLIAIHandler();
export { cliAIHandler };
