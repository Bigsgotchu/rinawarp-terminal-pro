name: Automated Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      dry_run:
        description: 'Dry run (test only)'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --omit=optional

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate changelog and version
        id: changelog
        run: |
          # Generate changelog from git commits
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            CHANGELOG=$(git log --oneline --pretty=format:"- %s" | head -20)
          else
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s")
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Bump version
        id: version
        run: |
          BUMP_TYPE="${{ github.event.inputs.version_bump || 'patch' }}"
          
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "ðŸ§ª DRY RUN: Would bump version ($BUMP_TYPE)"
            NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
            git checkout -- package.json package-lock.json
            echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "tag=${NEW_VERSION}" >> $GITHUB_OUTPUT
          else
            NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
            echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
            echo "tag=${NEW_VERSION}" >> $GITHUB_OUTPUT
            
            # Commit version bump
            git add package.json package-lock.json
            git commit -m "chore: bump version to ${NEW_VERSION}"
            git tag $NEW_VERSION
            git push origin main
            git push origin $NEW_VERSION
          fi

      - name: Create GitHub Release
        if: github.event.inputs.dry_run != 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: "Release ${{ steps.version.outputs.version }}"
          body: |
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            ### macOS
            Download the `.zip` file and extract it. Move the app to your Applications folder.
            
            ### Windows
            Download the `.exe` installer and run it.
            
            ### Linux
            Download the `.AppImage` file, make it executable, and run it:
            ```bash
            chmod +x RinaWarp-Terminal-*.AppImage
            ./RinaWarp-Terminal-*.AppImage
            ```
            
            ## Full Changelog
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.version.outputs.tag }}...HEAD
          draft: true
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: create-release
    if: github.event.inputs.dry_run != 'true'
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-release.outputs.tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --omit=optional
        
      - name: Install platform-specific dependencies
        if: matrix.os == 'macos-latest'
        run: |
          npm install dmg-license --no-save
          brew install create-dmg || echo "create-dmg already installed"
          
      - name: Install Linux-specific dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxss1 libgtk-3-dev libxrandr2 libasound2-dev

      - name: Build Electron app
        run: |
          echo "Building for platform: ${{ matrix.platform }}"
          npm run build:${{ matrix.platform }}
          echo "Build completed for ${{ matrix.platform }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
          DEBUG: electron-builder
          CSC_IDENTITY_AUTO_DISCOVERY: false
          CSC_LINK: ""
          CSC_KEY_PASSWORD: ""
          ELECTRON_BUILDER_ALLOW_UNRESOLVED_DEPENDENCIES: true
          APPLE_ID: ""
          APPLE_ID_PASSWORD: ""
          APPLE_TEAM_ID: ""
          CSC_IDENTITY: ""
          CSC_NAME: ""
          NOTARIZE: "false"
          SIGN: "false"

      - name: List build outputs
        shell: bash
        run: |
          echo "Contents of dist directory:"
          find dist -type f -name "*" 2>/dev/null || echo "No dist directory found"

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          files: |
            dist/*.exe
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.dmg
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  finalize-release:
    needs: [create-release, build]
    if: github.event.inputs.dry_run != 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.create-release.outputs.tag }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify success
        run: |
          echo "ðŸŽ‰ Release ${{ needs.create-release.outputs.version }} published successfully!"
          echo "ðŸ“¦ Artifacts uploaded to: https://github.com/${{ github.repository }}/releases/tag/${{ needs.create-release.outputs.tag }}"
