name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'

env:
  APP_NAME: "RinaWarp Terminal"
  NODE_VERSION: "18"

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      is_valid: ${{ steps.validate.outputs.is_valid }}
      version: ${{ steps.validate.outputs.version }}
      is_prerelease: ${{ steps.validate.outputs.is_prerelease }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate tag format
        id: validate
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "Tag: $TAG"
          
          # Check if tag matches semantic versioning
          if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-.*)?$ ]]; then
            echo "is_valid=true" >> $GITHUB_OUTPUT
            echo "version=${TAG#v}" >> $GITHUB_OUTPUT
            
            # Check if it's a prerelease
            if [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+-.+$ ]]; then
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              echo "This is a prerelease version"
            else
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              echo "This is a stable release version"
            fi
          else
            echo "is_valid=false" >> $GITHUB_OUTPUT
            echo "Invalid tag format. Expected format: vX.Y.Z or vX.Y.Z-suffix"
            exit 1
          fi

  test-before-release:
    name: Test Before Release
    needs: validate-tag
    runs-on: ubuntu-latest
    if: needs.validate-tag.outputs.is_valid == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Verify package.json version matches tag
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          TAG_VERSION="${{ needs.validate-tag.outputs.version }}"
          
          if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
            echo "❌ Version mismatch!"
            echo "Package.json version: $PACKAGE_VERSION"
            echo "Git tag version: $TAG_VERSION"
            exit 1
          else
            echo "✅ Version matches: $PACKAGE_VERSION"
          fi

  build-release:
    name: Build Release
    needs: [validate-tag, test-before-release]
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            target: nsis,portable
            artifact_name: windows
          - os: ubuntu-latest
            platform: linux
            arch: x64
            target: AppImage,deb,rpm
            artifact_name: linux
          - os: macos-latest
            platform: darwin
            arch: x64
            target: dmg,zip
            artifact_name: macos-intel
          - os: macos-latest
            platform: darwin
            arch: arm64
            target: dmg,zip
            artifact_name: macos-apple-silicon

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Platform-specific setup
      - name: Setup Windows signing
        if: matrix.os == 'windows-latest'
        run: |
          # For production, you would use a real certificate from secrets
          # For now, create a self-signed certificate
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=RinaWarp Technologies" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -KeyUsage DigitalSignature -CertStoreLocation Cert:\CurrentUser\My
          Export-PfxCertificate -Cert $cert -FilePath "rinawarp-codesign.pfx" -Password (ConvertTo-SecureString -String "RinaWarp2025!" -Force -AsPlainText)
        shell: pwsh

      - name: Setup Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss-dev libasound2-dev

      # Build the application
      - name: Build application
        env:
          # Windows code signing
          CSC_LINK: ${{ matrix.os == 'windows-latest' && './rinawarp-codesign.pfx' || '' }}
          CSC_KEY_PASSWORD: ${{ matrix.os == 'windows-latest' && 'RinaWarp2025!' || '' }}
          
          # macOS code signing (would use real certificates in production)
          # CSC_LINK: ${{ secrets.MACOS_CERTIFICATE }}
          # CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            npm run build:win
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            npm run build:linux
          else
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              npm run build -- --mac --arm64
            else
              npm run build:mac
            fi
          fi
        shell: bash

      # Generate checksums
      - name: Generate checksums
        run: |
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            Get-FileHash *.exe -Algorithm SHA256 | ForEach-Object { "$($_.Hash.ToLower())  $($_.Path | Split-Path -Leaf)" } > SHA256SUMS
          else
            find . -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" \) -exec sha256sum {} \; | sed 's|\./||' > SHA256SUMS
          fi
        shell: bash

      # Upload artifacts
      - name: Upload release artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-${{ matrix.artifact_name }}-${{ github.sha }}
          path: |
            dist/*.exe
            dist/*.msi
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/SHA256SUMS
          retention-days: 90

  create-github-release:
    name: Create GitHub Release
    needs: [validate-tag, test-before-release, build-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for changelog

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./release-assets

      - name: Organize release assets
        run: |
          mkdir -p final-release
          find release-assets -type f -exec cp {} final-release/ \;
          ls -la final-release/

      - name: Generate changelog
        id: changelog
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $TAG^ 2>/dev/null || echo "")
          
          echo "Current tag: $TAG"
          echo "Previous tag: $PREVIOUS_TAG"
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "Generating changelog from $PREVIOUS_TAG to $TAG"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..$TAG)
          else
            echo "No previous tag found, using last 10 commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" -10)
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          # RinaWarp Terminal $TAG
          
          ## 🚀 What's New in This Release
          
          ### Changes
          $CHANGELOG
          
          ## ✨ Key Features
          - 🤖 Advanced AI-powered command assistance
          - 🎨 Multiple beautiful themes including the signature Mermaid theme
          - 🔧 Git workflow integration with smart branch management
          - 💾 Session management and workspace restoration
          - ☁️ Cloud sync capabilities across devices
          - 🔒 Enhanced security features and command validation
          - 🖥️ Multi-tab and split-pane terminal support
          - 🎯 Natural language command processing
          
          ## 📦 Downloads
          
          ### Windows
          - **Installer**: \`RinaWarp Terminal Setup $TAG.exe\` - Full installer with shortcuts
          - **Portable**: \`RinaWarp Terminal $TAG.exe\` - Standalone executable
          
          ### macOS
          - **Intel Macs**: \`RinaWarp Terminal $TAG-x64.dmg\`
          - **Apple Silicon**: \`RinaWarp Terminal $TAG-arm64.dmg\`
          - **Universal ZIP**: \`RinaWarp Terminal $TAG.zip\`
          
          ### Linux
          - **AppImage**: \`RinaWarp Terminal $TAG.AppImage\` - Universal Linux binary
          - **Debian/Ubuntu**: \`rinawarp-terminal_$TAG_amd64.deb\`
          - **RedHat/Fedora**: \`rinawarp-terminal-$TAG.x86_64.rpm\`
          
          ## 🔐 Security & Verification
          
          All executables are code-signed for security. SHA256 checksums are provided in \`SHA256SUMS\` files for verification.
          
          ### Verify Downloads
          \`\`\`bash
          # Verify checksum on Linux/macOS
          sha256sum -c SHA256SUMS
          
          # Verify checksum on Windows
          Get-FileHash filename.exe -Algorithm SHA256
          \`\`\`
          
          ## 💝 Commercial License
          
          RinaWarp Terminal is a commercial product with a **30-day free trial**!
          
          - 🆓 **Free Trial**: Full Professional features for 30 days
          - 💰 **Personal**: \$19/year - Perfect for individual developers
          - 💼 **Professional**: \$49/year - Advanced features + cloud sync
          - 👥 **Team**: \$99/year - Team collaboration features
          - 🏢 **Enterprise**: Custom pricing - Enterprise security + support
          
          **[📊 View Full Pricing](https://rinawarp-terminal.web.app/pricing)**
          
          ## 📚 Resources
          
          - 📖 **[Documentation](https://rinawarp-terminal.web.app/docs)**
          - 🎥 **[Video Tutorials](https://rinawarp-terminal.web.app/tutorials)**
          - 💬 **[Community Support](https://rinawarp-terminal.web.app/community)**
          - 🐛 **[Report Issues](https://github.com/${{ github.repository }}/issues)**
          - ✉️ **[Email Support](mailto:support@rinawarp-terminal.web.app)**
          
          ## 🎯 Installation Instructions
          
          ### Windows
          1. Download the installer (\`.exe\`)
          2. Run as administrator if needed
          3. Follow the installation wizard
          4. Launch from Start Menu or Desktop
          
          ### macOS
          1. Download the DMG file
          2. Open and drag RinaWarp Terminal to Applications
          3. On first launch, right-click → Open (to bypass Gatekeeper)
          4. Grant necessary permissions when prompted
          
          ### Linux
          1. **AppImage**: Download, make executable (\`chmod +x\`), and run
          2. **DEB**: \`sudo dpkg -i rinawarp-terminal_*.deb\`
          3. **RPM**: \`sudo rpm -i rinawarp-terminal-*.rpm\`
          
          ---
          
          **System Requirements**: Windows 10+, macOS 10.14+, or modern Linux distribution
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$TAG
          EOF
          
          echo "changelog_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: RinaWarp Terminal ${{ github.ref_name }}
          body_path: ${{ steps.changelog.outputs.changelog_file }}
          draft: false
          prerelease: ${{ needs.validate-tag.outputs.is_prerelease }}
          files: |
            final-release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update latest release info
        if: needs.validate-tag.outputs.is_prerelease == 'false'
        run: |
          echo "This is a stable release - updating latest release pointers"
          # Here you could update a JSON file or API endpoint that your app checks for updates

  post-release:
    name: Post-Release Tasks
    needs: [validate-tag, create-github-release]
    runs-on: ubuntu-latest
    if: needs.validate-tag.outputs.is_prerelease == 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub issue for release announcement
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = '${{ github.ref_name }}';
            const version = '${{ needs.validate-tag.outputs.version }}';
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🎉 RinaWarp Terminal ${tagName} Released!`,
              body: `## 🚀 New Release Available!
              
              RinaWarp Terminal ${tagName} has been successfully released!
              
              ### 📦 Download Links
              - [GitHub Releases](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tagName})
              - [Official Website](https://rinawarp-terminal.web.app/download)
              
              ### 📢 Spread the Word
              - [ ] Update website download links
              - [ ] Post on social media
              - [ ] Update documentation
              - [ ] Notify customers via email
              - [ ] Update app store listings (if applicable)
              
              ### 🔍 Post-Release Monitoring
              - [ ] Monitor for crash reports
              - [ ] Check download statistics
              - [ ] Monitor user feedback
              - [ ] Watch for security issues
              
              ---
              
              This issue was automatically created by the release workflow.`,
              labels: ['release', 'announcement']
            });

      - name: Release summary
        run: |
          echo "## ✅ Release Complete!"
          echo "Version: ${{ needs.validate-tag.outputs.version }}"
          echo "Tag: ${{ github.ref_name }}"
          echo "Type: ${{ needs.validate-tag.outputs.is_prerelease == 'true' && 'Pre-release' || 'Stable Release' }}"
          echo "Artifacts: $(find final-release -type f | wc -l) files"
          echo ""
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo "📊 Downloads will be tracked automatically"
          echo ""
          echo "Next steps:"
          echo "1. Monitor release for issues"
          echo "2. Update documentation if needed"
          echo "3. Announce on social media"
          echo "4. Notify customers via email"
