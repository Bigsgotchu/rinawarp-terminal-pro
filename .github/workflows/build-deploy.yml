name: Build & Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: "18"

jobs:
  build:
    name: Build Application
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            build_command: npm run build:linux
            artifact_pattern: "dist/*.{AppImage,deb,rpm}"
          - os: windows-latest
            platform: windows
            build_command: npm run build:win
            artifact_pattern: "dist/*.{exe,msi}"
          - os: macos-latest
            platform: macos
            build_command: npm run build:mac
            artifact_pattern: "dist/*.{dmg,zip}"
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss-dev libasound2-dev

      - name: Build application
        run: ${{ matrix.build_command }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Optional code signing (only if secrets are available)
          CSC_LINK: ${{ secrets.CSC_LINK || '' }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD || '' }}
          # macOS notarization (optional)
          APPLE_ID: ${{ secrets.APPLE_ID || '' }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS || '' }}
          # Skip code signing if secrets not available
          CSC_IDENTITY_AUTO_DISCOVERY: false

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ github.sha }}
          path: |
            dist/*
            !dist/builder-effective-config.yaml
            !dist/.icon-*
          retention-days: 30

      - name: Build Report
        if: failure()
        run: |
          echo "::error::Build failed for ${{ matrix.platform }}. Please check the build logs above."
          echo "::error::Run '${{ matrix.build_command }}' locally to reproduce the issue."
          exit 1

  deploy-preview:
    name: Deploy Preview (PR only)
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download Linux build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-linux-${{ github.sha }}
          path: dist/

      - name: Deploy to staging/preview
        run: |
          echo "Deploying preview build..."
          # Add your preview deployment logic here
          # For example, upload to a staging server or create preview URLs
          echo "Preview deployment would be implemented here"

      - name: Comment PR with preview links
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ **Preview Build Ready!**\n\nBuilds have been generated for this PR:\n- Linux: Available in artifacts\n- Windows: Available in artifacts\n- macOS: Available in artifacts\n\nDownload the artifacts from the [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) to test the changes.'
            })

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts/ -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.zip" | xargs -I {} cp {} release-assets/

      - name: Create Release (for tags)
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          draft: false
          prerelease: contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc')
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to production (main branch)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to production..."
          # Add your production deployment logic here
          # For example, upload to distribution servers, update auto-updater feeds, etc.
          echo "Production deployment would be implemented here"

      - name: Notify deployment success
        run: |
          echo "::notice::Deployment completed successfully!"
          echo "::notice::Artifacts are available for download from this build."
