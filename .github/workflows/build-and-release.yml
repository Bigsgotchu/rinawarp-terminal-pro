name: Build and Release

permissions:
  contents: write
  packages: read
  actions: read

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            platform: mac
            arch: x64
          - os: windows-latest
            platform: win
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      
      # Cache dependencies and build artifacts
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .cache
            node_modules
            dist
          key: ${{ runner.os }}-cache-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('webpack.config.js') }}
          restore-keys: |
            ${{ runner.os }}-cache-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-cache-

      # Cache Electron binaries
      - name: Cache Electron
        uses: actions/cache@v4
        with:
          path: ~/.cache/electron
          key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      # Install Linux build dependencies
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon-dev libgtk-3-dev libxss1 libasound2-dev
      
      - name: Install dependencies
        run: |
          # Handle platform-specific dependencies
          if [ "${{ runner.os }}" = "macOS" ]; then
            npm install
          else
            # For non-macOS platforms, use --force to bypass dmg-license platform check
            npm install --force
          fi
          # Verify electron-builder is available
          npx electron-builder --version
        shell: bash
        
      - name: Copy assets
        run: npm run copy-assets
        
      - name: Build for ${{ matrix.platform }}
        run: |
          echo "üî® Starting build for ${{ matrix.platform }}"
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          
          # Clean dist directory first
          rm -rf dist/
          mkdir -p dist/
          
          if [ "${{ matrix.platform }}" = "mac" ]; then
            echo "Building for macOS..."
            npm run build:mac
          elif [ "${{ matrix.platform }}" = "win" ]; then
            echo "Building for Windows..."
            npm run build:windows
          else
            echo "Building for Linux..."
            npm run build:linux
          fi
          
          echo "‚úÖ Build completed for ${{ matrix.platform }}"
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
          DEBUG: "electron-builder"
          
      - name: List build outputs
        run: ls -la dist/
        shell: bash
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: dist/
          retention-days: 30
        if: always()
          
  package-releases:
    name: Package Releases
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Create release directory
        run: mkdir -p releases
        
      - name: Package releases
        run: |
          # Copy and rename files for website compatibility
          find artifacts -name "*.zip" -path "*/mac-build/*" -exec cp {} releases/RinaWarp-Terminal-macOS.zip \;
          find artifacts -name "*.exe" -path "*/win-build/*" -exec zip releases/RinaWarp-Terminal-Windows-Portable.zip {} \;
          find artifacts -name "*.AppImage" -path "*/linux-build/*" -exec cp {} releases/RinaWarp-Terminal-Linux.AppImage \;
          
          # Create universal download (same as macOS for now)
          if [ -f releases/RinaWarp-Terminal-macOS.zip ]; then
            cp releases/RinaWarp-Terminal-macOS.zip releases/rinawarp.zip
          fi
          
          # List final packages
          ls -la releases/
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: releases/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  deploy-to-website:
    name: Deploy to Website
    needs: package-releases
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download packaged releases
        uses: actions/download-artifact@v4
        with:
          path: releases
          
      - name: Deploy to releases directory
        run: |
          # This would typically deploy to your web server
          # For now, we'll just show what would be deployed
          echo "Would deploy the following files to public/releases/:"
          find releases -type f -name "*.zip" -o -name "*.AppImage" -o -name "*.exe" | sort
          
  quality-assurance:
    name: Quality Assurance
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm install --force
        
      - name: Run tests
        run: npm run test:ci
        continue-on-error: true
        
      - name: Run linting
        run: npm run lint
        continue-on-error: true
        
      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Verify build outputs
        run: |
          echo "üîç Verifying build outputs..."
          
          # Check file sizes
          find artifacts -type f \( -name "*.exe" -o -name "*.zip" -o -name "*.AppImage" \) -exec ls -lh {} \;
          
          # Basic file validation
          if find artifacts -name "*.exe" -size +100M | grep -q .; then
            echo "‚úÖ Windows executable appears to be complete"
          else
            echo "‚ùå Windows executable may be incomplete"
          fi
          
          if find artifacts -name "*.zip" -path "*/mac-build/*" -size +100M | grep -q .; then
            echo "‚úÖ macOS package appears to be complete"
          else
            echo "‚ùå macOS package may be incomplete"
          fi
          
          if find artifacts -name "*.AppImage" -size +100M | grep -q .; then
            echo "‚úÖ Linux AppImage appears to be complete"
          else
            echo "‚ùå Linux AppImage may be incomplete"
          fi
