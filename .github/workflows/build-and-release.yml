name: Build and Release

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'prerelease'
        type: choice
        options:
        - prerelease
        - release
      create_release:
        description: 'Create GitHub release'
        required: true
        default: true
        type: boolean

env:
  # Application details
  APP_NAME: "RinaWarp Terminal"
  APP_ID: "com.rinawarp.terminal"
  
  # Build configuration
  NODE_VERSION: "18"
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  # Test job
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting (if configured)
        run: npm run lint || echo "Linting not configured"

  # Build job for multiple platforms
  build:
    needs: test
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win32
            arch: x64
            target: nsis,portable
            artifact_name: windows
          - os: ubuntu-latest
            platform: linux
            arch: x64
            target: AppImage,deb,rpm
            artifact_name: linux
          - os: macos-latest
            platform: darwin
            arch: x64
            target: dmg,zip
            artifact_name: macos
          - os: macos-latest
            platform: darwin
            arch: arm64
            target: dmg,zip
            artifact_name: macos-arm64

    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Cache electron and electron-builder
      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: ${{ env.ELECTRON_CACHE }}
          key: ${{ runner.os }}-electron-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Cache Electron Builder
        uses: actions/cache@v3
        with:
          path: ${{ env.ELECTRON_BUILDER_CACHE }}
          key: ${{ runner.os }}-electron-builder-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-builder-

      - name: Install dependencies
        run: npm ci

      # Platform-specific preparations
      - name: Prepare Windows build
        if: matrix.os == 'windows-latest'
        run: |
          # Create self-signed certificate for Windows builds
          $cert = New-SelfSignedCertificate -Type CodeSigningCert -Subject "CN=RinaWarp Technologies" -KeyAlgorithm RSA -KeyLength 2048 -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" -KeyExportPolicy Exportable -KeyUsage DigitalSignature -CertStoreLocation Cert:\CurrentUser\My
          Export-PfxCertificate -Cert $cert -FilePath "rinawarp-codesign.pfx" -Password (ConvertTo-SecureString -String "RinaWarp2025!" -Force -AsPlainText)
        shell: pwsh

      - name: Prepare macOS build
        if: matrix.os == 'macos-latest'
        run: |
          # Install create-dmg for better DMG creation
          npm install --global create-dmg || true

      - name: Prepare Linux build
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Install dependencies for Linux builds
          sudo apt-get update
          sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxcomposite-dev libxdamage-dev libxrandr-dev libgbm-dev libxss-dev libasound2-dev

      # Build the application
      - name: Build Electron app
        env:
          # Windows code signing
          CSC_LINK: ${{ matrix.os == 'windows-latest' && './rinawarp-codesign.pfx' || '' }}
          CSC_KEY_PASSWORD: ${{ matrix.os == 'windows-latest' && 'RinaWarp2025!' || '' }}
          
          # macOS code signing (would need actual certificates)
          # CSC_LINK: ${{ secrets.CSC_LINK }}
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          
          # GitHub token for publishing
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
          # Platform-specific build targets
          ELECTRON_BUILDER_TARGETS: ${{ matrix.platform }}:${{ matrix.arch }}:${{ matrix.target }}
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            npm run build:win
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            npm run build:linux
          else
            if [ "${{ matrix.arch }}" = "arm64" ]; then
              npm run build -- --mac --arm64
            else
              npm run build:mac
            fi
          fi
        shell: bash

      # Upload build artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-${{ matrix.artifact_name }}-${{ github.sha }}
          path: |
            dist/*.exe
            dist/*.msi
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz
            dist/*.snap
          retention-days: 30

      # Create checksums
      - name: Generate checksums
        run: |
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            Get-FileHash *.exe -Algorithm SHA256 | Format-Table -AutoSize > checksums.txt
            Get-FileHash *.exe -Algorithm SHA256 | ConvertTo-Json > checksums.json
          else
            find . -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" -o -name "*.tar.gz" -o -name "*.snap" \) -exec sha256sum {} \; > checksums.txt
          fi
        shell: bash

      - name: Upload checksums
        uses: actions/upload-artifact@v3
        with:
          name: checksums-${{ matrix.artifact_name }}-${{ github.sha }}
          path: dist/checksums.*

  # Create release if it's a tag or manual trigger
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && inputs.create_release)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Download all artifacts
      - name: Download Windows artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-windows-${{ github.sha }}
          path: ./release/windows

      - name: Download Linux artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-linux-${{ github.sha }}
          path: ./release/linux

      - name: Download macOS x64 artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-macos-${{ github.sha }}
          path: ./release/macos

      - name: Download macOS ARM64 artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.APP_NAME }}-macos-arm64-${{ github.sha }}
          path: ./release/macos-arm64

      # Download checksums
      - name: Download checksums
        uses: actions/download-artifact@v3
        with:
          pattern: checksums-*-${{ github.sha }}
          path: ./release/checksums

      # Generate release notes
      - name: Generate release notes
        id: release_notes
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            TAG_NAME=${GITHUB_REF#refs/tags/}
            RELEASE_TYPE="release"
          else
            TAG_NAME="v$(date +%Y.%m.%d)-pre.$(echo $GITHUB_SHA | cut -c1-7)"
            RELEASE_TYPE="${{ inputs.release_type || 'prerelease' }}"
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          
          # Create release notes
          cat > release_notes.md << EOF
          # RinaWarp Terminal $TAG_NAME
          
          ## 🚀 What's New
          
          This release includes the latest features and improvements to RinaWarp Terminal.
          
          ### ✨ Key Features
          - Advanced AI-powered command assistance
          - Multiple beautiful themes including Mermaid theme
          - Git workflow integration
          - Session management
          - Cloud sync capabilities
          - Enhanced security features
          - Multi-tab and split-pane support
          
          ### 📦 Downloads
          
          #### Windows
          - **Installer**: RinaWarp Terminal Setup $TAG_NAME.exe
          - **Portable**: RinaWarp Terminal $TAG_NAME.exe
          
          #### macOS
          - **DMG**: RinaWarp Terminal $TAG_NAME.dmg (Intel & Apple Silicon)
          - **ZIP**: RinaWarp Terminal $TAG_NAME.zip
          
          #### Linux
          - **AppImage**: RinaWarp Terminal $TAG_NAME.AppImage
          - **DEB**: rinawarp-terminal_$TAG_NAME_amd64.deb
          - **RPM**: rinawarp-terminal-$TAG_NAME.x86_64.rpm
          
          ### 🔐 Security & Verification
          
          All executables are code-signed. Checksums are provided for verification.
          
          ### 💝 Commercial License
          
          RinaWarp Terminal is now a commercial product. Try it free for 30 days!
          - [View Pricing](https://rinawarp-terminal.web.app/pricing)
          - [Documentation](https://rinawarp-terminal.web.app/docs)
          - [Support](https://rinawarp-terminal.web.app/support)
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/\${{ github.event.before }}...$TAG_NAME
          EOF

      # Create the release
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_notes.outputs.tag_name }}
          name: RinaWarp Terminal ${{ steps.release_notes.outputs.tag_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.release_notes.outputs.release_type == 'prerelease' }}
          files: |
            release/windows/*
            release/linux/*
            release/macos/*
            release/macos-arm64/*
            release/checksums/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify on completion
  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Build Status Notification
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "✅ Build completed successfully!"
          else
            echo "❌ Build failed!"
            exit 1
          fi
          
          if [[ "${{ needs.release.result }}" == "success" ]]; then
            echo "🚀 Release created successfully!"
          elif [[ "${{ needs.release.result }}" == "skipped" ]]; then
            echo "ℹ️ Release skipped (not a tag or manual release)"
          else
            echo "❌ Release failed!"
          fi
