name: üßú‚Äç‚ôÄÔ∏è RinaWarp Terminal - Risk-Based Deployment

on:
  push:
    branches: [main, develop, 'feature/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      deployment_phase:
        description: 'Deployment Phase'
        required: true
        default: 'phase1'
        type: choice
        options:
        - phase1
        - phase2
        - phase3
        - full-rollout
      risk_tolerance:
        description: 'Risk Tolerance Level'
        required: true
        default: 'standard'
        type: choice
        options:
        - conservative
        - standard
        - aggressive

env:
  NODE_VERSION: '20.x'
  DEPLOYMENT_TIMEOUT: '15m'
  MAX_MEMORY_USAGE: '200MB'
  MAX_STARTUP_TIME: '2000ms'

jobs:
  # Phase 1: Risk Assessment & Pattern Scanning
  risk-assessment:
    name: üîç Risk Assessment
    runs-on: ubuntu-latest
    outputs:
      risk-level: ${{ steps.scan.outputs.risk_level }}
      should-proceed: ${{ steps.scan.outputs.should_proceed }}
      high-risk-count: ${{ steps.scan.outputs.high_risk_count }}
      feature-flags: ${{ steps.flags.outputs.enabled_features }}
      
    steps:
    - name: üöÄ Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Install Dependencies
      run: |
        npm ci
        chmod +x migrationToolkit/deprecatedPatternsScanner.js
        
    - name: üîç Deprecated Patterns Scan
      id: scan
      run: |
        echo "üîç Scanning for deprecated patterns..."
        node migrationToolkit/deprecatedPatternsScanner.js ./src > scan-results.txt 2>&1 || true
        
        # Extract risk metrics
        HIGH_RISK=$(grep -c "üî¥ HIGH RISK" scan-results.txt || echo "0")
        MEDIUM_RISK=$(grep -c "üü° MEDIUM RISK" scan-results.txt || echo "0") 
        
        echo "high_risk_count=$HIGH_RISK" >> $GITHUB_OUTPUT
        echo "medium_risk_count=$MEDIUM_RISK" >> $GITHUB_OUTPUT
        
        # Determine overall risk level
        if [ "$HIGH_RISK" -gt "0" ]; then
          echo "risk_level=DANGEROUS" >> $GITHUB_OUTPUT
          echo "should_proceed=false" >> $GITHUB_OUTPUT
        elif [ "$MEDIUM_RISK" -gt "5" ]; then
          echo "risk_level=EXPERIMENTAL" >> $GITHUB_OUTPUT
          echo "should_proceed=conditional" >> $GITHUB_OUTPUT
        else
          echo "risk_level=STABLE" >> $GITHUB_OUTPUT
          echo "should_proceed=true" >> $GITHUB_OUTPUT
        fi
        
        # Upload scan results
        cat scan-results.txt
        
    - name: üö¶ Feature Flag Assessment
      id: flags
      run: |
        echo "üö¶ Analyzing feature flag configuration..."
        
        # Create default feature config if not exists
        mkdir -p config
        if [ ! -f "config/feature-flags.json" ]; then
          cat > config/feature-flags.json << 'EOF'
        {
          "lastUpdated": "${{ github.run_id }}",
          "runtimeMode": "ci",
          "features": {
            "coreTerminal": { "enabled": true },
            "legacyThemes": { "enabled": true },
            "advancedThemes": { "enabled": false },
            "hybridEmail": { "enabled": false },
            "performanceMonitoring": { "enabled": false },
            "discordBot": { "enabled": false },
            "mobileCompanion": { "enabled": false },
            "aiAssistant": { "enabled": false },
            "voiceRecognition": { "enabled": false }
          }
        }
        EOF
        fi
        
        # Count enabled features by risk
        STABLE_FEATURES=$(jq -r '.features | to_entries[] | select(.value.enabled == true) | .key' config/feature-flags.json | wc -l)
        echo "enabled_features=$STABLE_FEATURES" >> $GITHUB_OUTPUT
        
    - name: üìä Risk Summary
      run: |
        echo "## üéØ Risk Assessment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| High Risk Issues | ${{ steps.scan.outputs.high_risk_count }} | ${{ steps.scan.outputs.high_risk_count == '0' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Overall Risk Level | ${{ steps.scan.outputs.risk_level }} | ${{ steps.scan.outputs.risk_level == 'STABLE' && 'üü¢' || steps.scan.outputs.risk_level == 'EXPERIMENTAL' && 'üü°' || 'üî¥' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Should Proceed | ${{ steps.scan.outputs.should_proceed }} | ${{ steps.scan.outputs.should_proceed == 'true' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Enabled Features | ${{ steps.flags.outputs.enabled_features }} | üìä |" >> $GITHUB_STEP_SUMMARY
        
    - name: ‚ö†Ô∏è Block Dangerous Deployment
      if: steps.scan.outputs.should_proceed == 'false'
      run: |
        echo "‚ùå Deployment blocked due to high-risk patterns detected"
        echo "High-risk issues found: ${{ steps.scan.outputs.high_risk_count }}"
        echo "Please fix high-risk patterns before proceeding"
        exit 1

  # Phase 2: Core Stability Testing
  core-stability:
    name: üß™ Core Stability Tests  
    runs-on: ubuntu-latest
    needs: risk-assessment
    if: needs.risk-assessment.outputs.should-proceed != 'false'
    
    strategy:
      matrix:
        feature-set:
          - name: "minimal"
            description: "Core terminal only"
            config: |
              {
                "coreTerminal": true,
                "legacyThemes": true,
                "advancedThemes": false,
                "hybridEmail": false,
                "performanceMonitoring": false
              }
          - name: "standard"
            description: "Core + experimental features"
            config: |
              {
                "coreTerminal": true, 
                "legacyThemes": true,
                "advancedThemes": true,
                "hybridEmail": true,
                "performanceMonitoring": true
              }
    
    steps:
    - name: üöÄ Checkout
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Install Dependencies  
      run: npm ci
      
    - name: ‚öôÔ∏è Configure Feature Set
      run: |
        mkdir -p config
        echo '${{ matrix.feature-set.config }}' | jq '{"features": .}' > config/feature-flags.json
        echo "Testing feature set: ${{ matrix.feature-set.name }}"
        
    - name: üß™ Unit Tests
      run: npm run test:unit
      timeout-minutes: 5
      
    - name: üîó Integration Tests
      run: npm run test:integration
      timeout-minutes: 10
      
    - name: ‚ö° Performance Benchmarks
      run: |
        npm run test:performance
        
        # Check performance constraints
        STARTUP_TIME=$(node -e "
          const { performance } = require('perf_hooks');
          const start = performance.now();
          require('./src/core/featureFlags');
          const end = performance.now();
          console.log(Math.round(end - start));
        ")
        
        echo "Startup time: ${STARTUP_TIME}ms"
        
        if [ "$STARTUP_TIME" -gt "2000" ]; then
          echo "‚ùå Startup time exceeds limit (${STARTUP_TIME}ms > 2000ms)"
          exit 1
        fi
        
    - name: üß† Memory Usage Test
      run: |
        node -e "
          const { createFeatureFlags } = require('./src/core/featureFlags');
          const flags = createFeatureFlags();
          flags.initialize().then(() => {
            const memUsage = process.memoryUsage();
            const heapMB = Math.round(memUsage.heapUsed / 1024 / 1024);
            console.log('Memory usage:', heapMB, 'MB');
            if (heapMB > 200) {
              console.error('Memory usage exceeds limit');
              process.exit(1);
            }
          });
        "

  # Phase 3: Feature Flag Matrix Testing
  feature-flag-matrix:
    name: üéõÔ∏è Feature Flag Matrix
    runs-on: ubuntu-latest
    needs: [risk-assessment, core-stability]
    if: needs.risk-assessment.outputs.risk-level != 'DANGEROUS'
    
    strategy:
      matrix:
        risk-level: ['STABLE', 'EXPERIMENTAL']
        
    steps:
    - name: üöÄ Checkout
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Install Dependencies
      run: npm ci
      
    - name: üéõÔ∏è Test Feature Flag System
      run: |
        node -e "
          const { createFeatureFlags } = require('./src/core/featureFlags');
          const flags = createFeatureFlags({ runtimeMode: 'ci' });
          
          flags.initialize().then(() => {
            console.log('‚úÖ Feature flag system initialized');
            
            const summary = flags.getRiskSummary();
            console.log('Risk summary:', summary);
            
            const enabled = flags.getEnabledFeatures();
            console.log('Enabled features:', enabled.length);
            
            // Test enabling ${{ matrix.risk-level }} features
            const riskLevel = '${{ matrix.risk-level }}';
            console.log('Testing risk level:', riskLevel);
          }).catch(error => {
            console.error('‚ùå Feature flag test failed:', error);
            process.exit(1);
          });
        "
        
    - name: üéØ Boot Profile Test
      run: |
        timeout 30s node src/tools/bootProfileVisualizer.js || true
        
        # Check if logs were generated
        if [ -f "logs/boot-profile.log" ]; then
          echo "‚úÖ Boot profile logging working"
          tail -5 logs/boot-profile.log
        else
          echo "‚ö†Ô∏è Boot profile logs not generated"
        fi

  # Phase 4: Security & Compliance
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: risk-assessment
    
    steps:
    - name: üöÄ Checkout
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Install Dependencies
      run: npm ci
      
    - name: üîç Dependency Audit
      run: |
        npm audit --audit-level high
        
    - name: üõ°Ô∏è Security Linting
      run: |
        npx eslint src --ext .js --config .eslintrc.security.js || true
        
    - name: üîí Secrets Scan
      run: |
        # Check for potential secrets in code
        echo "üîç Scanning for potential secrets..."
        
        # Look for common secret patterns
        if grep -r "api[_-]key\|password\|secret\|token" src/ --include="*.js" | grep -v "\.test\." | grep -v "example\|demo\|placeholder"; then
          echo "‚ö†Ô∏è Potential secrets found in code"
        else
          echo "‚úÖ No obvious secrets found"
        fi

  # Phase 5: Multi-Environment Deployment
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [risk-assessment, core-stability, feature-flag-matrix, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment:
      name: staging
      url: https://staging.rinawarp-terminal.dev
      
    steps:
    - name: üöÄ Checkout
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Build Application
      run: |
        npm ci
        npm run build:staging
        
    - name: üéõÔ∏è Configure Staging Features
      run: |
        # Enable safe features for staging
        cat > config/feature-flags.json << 'EOF'
        {
          "runtimeMode": "staging",
          "features": {
            "coreTerminal": { "enabled": true },
            "legacyThemes": { "enabled": true },
            "advancedThemes": { "enabled": true },
            "hybridEmail": { "enabled": true },
            "performanceMonitoring": { "enabled": true },
            "discordBot": { "enabled": false },
            "mobileCompanion": { "enabled": false },
            "aiAssistant": { "enabled": false }
          }
        }
        EOF
        
    - name: üß™ Staging Health Check
      run: |
        echo "üè• Running staging health checks..."
        
        # Simulate deployment health check
        node -e "
          const { createFeatureFlags } = require('./src/core/featureFlags');
          const flags = createFeatureFlags({ runtimeMode: 'staging' });
          
          flags.initialize().then(() => {
            const summary = flags.getRiskSummary();
            console.log('Staging feature summary:', summary);
            
            if (summary.DANGEROUS > 0) {
              console.error('‚ùå Dangerous features enabled in staging');
              process.exit(1);
            }
            
            console.log('‚úÖ Staging deployment ready');
          });
        "
        
    - name: üìä Deployment Summary
      run: |
        echo "## üöÄ Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| Risk Level | ${{ needs.risk-assessment.outputs.risk-level }} | ${{ needs.risk-assessment.outputs.risk-level == 'STABLE' && 'üü¢ Safe' || 'üü° Monitoring' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Features Enabled | Staging Safe | ‚úÖ Only STABLE and EXPERIMENTAL |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | Within Limits | ‚ö° < 2s startup, < 200MB memory |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | Passed | üîí No high-risk vulnerabilities |" >> $GITHUB_STEP_SUMMARY

  deploy-production:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: [risk-assessment, core-stability, feature-flag-matrix, security-scan, deploy-staging]
    if: github.ref == 'refs/heads/main' && needs.risk-assessment.outputs.risk-level == 'STABLE'
    environment:
      name: production
      url: https://rinawarp-terminal.com
      
    steps:
    - name: üöÄ Checkout
      uses: actions/checkout@v4
      
    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: üîß Build Production
      run: |
        npm ci
        npm run build:production
        
    - name: üéõÔ∏è Configure Production Features
      run: |
        # Only STABLE features in production
        cat > config/feature-flags.json << 'EOF'
        {
          "runtimeMode": "production", 
          "features": {
            "coreTerminal": { "enabled": true },
            "legacyThemes": { "enabled": true },
            "advancedThemes": { "enabled": false },
            "hybridEmail": { "enabled": false },
            "performanceMonitoring": { "enabled": false },
            "discordBot": { "enabled": false },
            "mobileCompanion": { "enabled": false },
            "aiAssistant": { "enabled": false }
          }
        }
        EOF
        
    - name: üè• Production Health Check
      run: |
        echo "üè• Final production health check..."
        
        node -e "
          const { createFeatureFlags } = require('./src/core/featureFlags');
          const flags = createFeatureFlags({ runtimeMode: 'production' });
          
          flags.initialize().then(() => {
            const summary = flags.getRiskSummary();
            console.log('Production feature summary:', summary);
            
            if (summary.EXPERIMENTAL > 0 || summary.DANGEROUS > 0) {
              console.error('‚ùå Non-stable features detected in production');
              process.exit(1);
            }
            
            console.log('‚úÖ Production deployment validated');
          });
        "
        
    - name: üéâ Production Deployment Success
      run: |
        echo "## üéâ Production Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Deployment | Complete | ‚úÖ |" >> $GITHUB_STEP_SUMMARY
        echo "| Features | STABLE Only | üü¢ |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | Optimized | ‚ö° |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | Validated | üîí |" >> $GITHUB_STEP_SUMMARY
        
        echo "üßú‚Äç‚ôÄÔ∏è RinaWarp Terminal deployed successfully!"

  # Failure notification and rollback
  rollback-on-failure:
    name: üîÑ Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: failure()
    
    steps:
    - name: üö® Deployment Failed
      run: |
        echo "‚ùå Deployment pipeline failed"
        echo "Initiating rollback procedures..."
        
        echo "## üö® Deployment Failure Alert" >> $GITHUB_STEP_SUMMARY
        echo "The deployment pipeline has failed and rollback procedures should be initiated." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Review failed job logs" >> $GITHUB_STEP_SUMMARY
        echo "2. Fix issues identified in risk assessment" >> $GITHUB_STEP_SUMMARY
        echo "3. Re-run deployment with fixes" >> $GITHUB_STEP_SUMMARY
        echo "4. Monitor system health after rollback" >> $GITHUB_STEP_SUMMARY
