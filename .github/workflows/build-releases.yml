name: Build and Release RinaWarp Terminal

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      continue-on-error: true
      run: npm test

    - name: Copy assets
      run: npm run copy-assets

    # Windows builds
    - name: Build Windows installer
      if: matrix.os == 'windows-latest'
      run: npx electron-builder --win nsis --publish never
      env:
        NODE_ENV: production

    - name: Build Windows portable
      if: matrix.os == 'windows-latest'
      run: npx electron-builder --win --dir
      env:
        NODE_ENV: production

    - name: Package Windows portable
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Compress-Archive -Path "dist/win-unpacked/*" -DestinationPath "RinaWarp-Terminal-Windows-Portable.zip"

    # Linux builds
    - name: Build Linux packages
      if: matrix.os == 'ubuntu-latest'
      run: npx electron-builder --linux appimage tar.gz --publish never
      env:
        NODE_ENV: production

    # macOS builds
    - name: Build macOS DMG
      if: matrix.os == 'macos-latest'
      run: npx electron-builder --mac dmg --publish never
      env:
        NODE_ENV: production
        CSC_IDENTITY_AUTO_DISCOVERY: false

    # Upload artifacts
    - name: Upload Windows installer
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: dist/*.exe
        if-no-files-found: ignore

    - name: Upload Windows portable
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: windows-portable
        path: "*.zip"
        if-no-files-found: ignore

    - name: Upload Linux packages
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          dist/*.AppImage
          dist/*.tar.gz
        if-no-files-found: ignore

    - name: Upload macOS DMG
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: dist/*.dmg
        if-no-files-found: ignore

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Display structure of downloaded files
      run: ls -la release-artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release-artifacts/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
