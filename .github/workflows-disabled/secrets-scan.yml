# üßú‚Äç‚ôÄÔ∏è Upgraded to GitHub Actions v4 - 2025-07-12
# 1 improvements applied
# - Latest action versions for better performance and security
# - Node.js 20 LTS for enhanced capabilities  
# - Optimized caching for faster builds

name: Secrets Security Scan

# Restrict permissions for security
permissions:
  contents: read
  security-events: write
  issues: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Daily secret scan at 1 AM UTC
    - cron: '0 1 * * *'

env:
  NODE_VERSION: "20"  # Latest LTS with enhanced performance

jobs:
  secrets-scan:
    name: Scan for Exposed Secrets
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scan
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          submodules: recursive
          
      - name: Scan for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
          
      - name: Scan for hardcoded secrets
        run: |
          echo "üîç Scanning for hardcoded secrets and improper secret usage..."
          
          # Check for hardcoded API keys, tokens, passwords
          echo "Checking for hardcoded secrets..."
          if grep -r -i --include="*.js" --include="*.ts" --include="*.json" --include="*.yml" --include="*.yaml" \
            -E "(api_key|apikey|secret|password|token|private_key)[\s]*[:=][\s]*['\"][^'\"]{10,}" . | \
            grep -v -E "(example|template|placeholder|\{\{.*\}\}|secrets\.)" | \
            grep -v ".git/"; then
            echo "‚ùå Found hardcoded secrets!"
            echo "::error::Hardcoded secrets detected. All secrets must use \${{ secrets.SECRET_NAME }} syntax."
            exit 1
          fi
          
      - name: Validate secrets usage in workflows
        run: |
          echo "üîê Validating proper secrets usage in GitHub Actions workflows..."
          
          # Check all workflow files for proper secrets syntax
          find .github/workflows -name "*.yml" -o -name "*.yaml" | while read workflow; do
            echo "Checking $workflow..."
            
            # Find lines with secrets but not using proper syntax
            if grep -n -E ".*secret.*|.*password.*|.*token.*|.*key.*" "$workflow" | \
               grep -v -E "\\\$\\\{\\\{\\\s*secrets\\\." | \
               grep -v -E "^[[:space:]]*#" | \
               grep -v -E "(name|description|runs-on|uses|if)" | \
               grep -E "(=|:)" | \
               grep -v -i -E "(github_token|permissions|security|content|read|write)"; then
              echo "‚ùå Found improper secret usage in $workflow"
              echo "::error::All secrets in workflows must use \${{ secrets.SECRET_NAME }} syntax"
              exit 1
            fi
          done
          
      - name: Check for exposed environment files
        run: |
          echo "üìã Checking for exposed environment files..."
          
          # Check if any .env files with real secrets are committed
          if find . -name ".env*" ! -name ".env.example" ! -name ".env.template" ! -name ".env.development" ! -name ".env.staging" -type f | head -1 | grep -q .; then
            echo "‚ùå Found potentially sensitive .env files!"
            find . -name ".env*" ! -name ".env.example" ! -name ".env.template" ! -name ".env.development" ! -name ".env.staging" -type f
            echo "::error::Environment files with secrets should not be committed. Use .env.example templates instead."
            exit 1
          fi
          
      - name: Validate gitignore coverage
        run: |
          echo "üõ°Ô∏è Validating .gitignore coverage for sensitive files..."
          
          # List of sensitive file patterns that should be in .gitignore
          sensitive_patterns=(
            "*.key"
            "*.pem" 
            "*.p12"
            "*.pfx"
            "*.crt"
            "*.cer"
            "*private-key*"
            "*secret*"
            "*.env"
            "*.env.local"
            "*.env.production"
            "service-account*.json"
          )
          
          for pattern in "${sensitive_patterns[@]}"; do
            if ! grep -q "$pattern" .gitignore; then
              echo "‚ö†Ô∏è Pattern '$pattern' not found in .gitignore"
            fi
          done
          
      - name: Check for certificate files
        run: |
          echo "üîê Checking for certificate and key files..."
          
          # Check for any certificate or key files that shouldn't be committed
          cert_files=$(find . -type f \( -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" -o -name "*.crt" -o -name "*.cer" \) | grep -v ".git" | head -10)
          
          if [ -n "$cert_files" ]; then
            echo "‚ùå Found certificate/key files that may contain secrets:"
            echo "$cert_files"
            echo "::warning::Certificate and key files found. Ensure these are test certificates only and not production secrets."
          fi
          
      - name: Security scan summary
        if: always()
        run: |
          echo "## üîí Security Scan Summary"
          echo ""
          echo "### Scans Performed:"
          echo "- ‚úÖ TruffleHog secrets detection"
          echo "- ‚úÖ Hardcoded secrets scan"
          echo "- ‚úÖ Workflow secrets validation"
          echo "- ‚úÖ Environment files check"
          echo "- ‚úÖ Gitignore coverage validation"
          echo "- ‚úÖ Certificate files scan"
          echo ""
          echo "### Security Best Practices:"
          echo "1. Use \`\${{ secrets.SECRET_NAME }}\` for all secrets in workflows"
          echo "2. Keep sensitive files in .gitignore"
          echo "3. Use environment variable templates (.env.example)"
          echo "4. Never commit production certificates or keys"
          echo "5. Regularly rotate secrets and tokens"
          echo ""
          echo "For more security guidance, see: .github/SECRETS_SETUP.md"
